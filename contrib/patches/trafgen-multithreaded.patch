diff --git a/src/trafgen.c b/src/trafgen.c
index 2980cff..04b30d0 100644
--- a/src/trafgen.c
+++ b/src/trafgen.c
@@ -20,6 +20,7 @@
  *        Chapter 'The Stairs of Cirith Ungol'.
  */
 
+#define _GNU_SOURCE
 #include <stdio.h>
 #include <string.h>
 #include <getopt.h>
@@ -35,6 +36,7 @@
 #include <assert.h>
 #include <fcntl.h>
 #include <time.h>
+#include <pthread.h>
 #include <net/ethernet.h>
 
 #include "xmalloc.h"
@@ -88,7 +90,7 @@ struct stats {
 };
 
 struct mode {
-	struct stats stats;
+	struct stats stats; /* for: tgap */
 	char *device;
 	int cpu;
 	int rand;
@@ -101,10 +103,25 @@ struct mode {
 #define CPU_UNKNOWN  -1
 #define CPU_NOTOUCH  -2
 
+struct worker_struct {
+	pthread_t trid;
+	unsigned int cpu;
+	int sock;
+	struct itimerval itimer;
+	unsigned long interval;
+	struct pktconf *cfg;
+	struct mode *mode;
+	struct stats stats;
+};
+
 sig_atomic_t sigint = 0;
 
 static const char *short_options = "d:c:n:t:vJhS:HQb:B:rk:";
 
+static struct worker_struct *threadpool;
+
+static unsigned int cpus __read_mostly = 0;
+
 static struct option long_options[] = {
 	{"dev", required_argument, 0, 'd'},
 	{"conf", required_argument, 0, 'c'},
@@ -124,8 +141,7 @@ static struct option long_options[] = {
 };
 
 static struct itimerval itimer;
-static int sock;
-static unsigned long interval = TX_KERNEL_PULL_INT;
+static unsigned long interval __read_mostly = TX_KERNEL_PULL_INT;
 
 static inline uint8_t lcrand(uint8_t val)
 {
@@ -147,12 +163,16 @@ static void signal_handler(int number)
 
 static void timer_elapsed(int number)
 {
+	int i;
 	itimer.it_interval.tv_sec = 0;
 	itimer.it_interval.tv_usec = interval;
 	itimer.it_value.tv_sec = 0;
 	itimer.it_value.tv_usec = interval;
 
-	pull_and_flush_tx_ring(sock);
+        for (i = 0; i < cpus; ++i) {
+		pull_and_flush_tx_ring(threadpool[i].sock);
+	}
+
 	setitimer(ITIMER_REAL, &itimer, NULL); 
 }
 
@@ -235,7 +255,7 @@ static void version(void)
  */
 static void tx_tgap_or_die(struct mode *mode, struct pktconf *cfg)
 {
-	int ifindex, mtu, ret;
+	int ifindex, mtu, ret, sock;
 	size_t l, c, r;
 	struct sockaddr_ll s_addr;
 	unsigned long num = 1;
@@ -323,7 +343,7 @@ static void tx_tgap_or_die(struct mode *mode, struct pktconf *cfg)
 	printf("\r%lu bytes outgoing\n", mode->stats.tx_bytes);
 }
 
-static void tx_fire_or_die(struct mode *mode, struct pktconf *cfg)
+static void *tx_fire_or_die(void *tr_self)
 {
 	int irq, ifindex, mtu;
 	unsigned int size, it = 0;
@@ -334,59 +354,68 @@ static void tx_fire_or_die(struct mode *mode, struct pktconf *cfg)
 	struct frame_map *hdr;
 	struct counter *cnt;
 	struct randomizer *rnd;
+	struct worker_struct *tr = tr_self;
 
-	if (!mode || !cfg)
+	if (!tr->mode || !tr->cfg)
 		panic("Panic over invalid args for TX trigger!\n");
-	if (cfg->len == 0)
+	if (tr->cfg->len == 0)
 		panic("Panic over invalid args for TX trigger!\n");
-	if (!device_up_and_running(mode->device))
+	if (!device_up_and_running(tr->mode->device))
 		panic("Device not up and running!\n");
 
-	mtu = device_mtu(mode->device);
-	for (l = 0; l < cfg->len; ++l) {
+	mtu = device_mtu(tr->mode->device);
+	for (l = 0; l < tr->cfg->len; ++l) {
 		/* eth src + eth dst + type == 14, fcs added by driver */
-		if (cfg->pkts[l].plen > mtu + 14)
+		if (tr->cfg->pkts[l].plen > mtu + 14)
 			panic("Device MTU < than your packet size!\n");
-		if (cfg->pkts[l].plen <= 14)
+		if (tr->cfg->pkts[l].plen <= 14)
 			panic("Device packet size too short!\n");
 	}
 
 	set_memcpy();
-	sock = pf_socket();
+	tr->sock = pf_socket();
 
 	memset(&tx_ring, 0, sizeof(tx_ring));
 
-	ifindex = device_ifindex(mode->device);
-	size = ring_size(mode->device, mode->reserve_size);
+	ifindex = device_ifindex(tr->mode->device);
+	size = ring_size(tr->mode->device, tr->mode->reserve_size);
 
-	set_packet_loss_discard(sock);
-	setup_tx_ring_layout(sock, &tx_ring, size, mode->jumbo_support);
-	create_tx_ring(sock, &tx_ring);
-	mmap_tx_ring(sock, &tx_ring);
+	set_packet_loss_discard(tr->sock);
+	setup_tx_ring_layout(tr->sock, &tx_ring, size, tr->mode->jumbo_support);
+	create_tx_ring(tr->sock, &tx_ring);
+	mmap_tx_ring(tr->sock, &tx_ring);
 	alloc_tx_ring_frames(&tx_ring);
-	bind_tx_ring(sock, &tx_ring, ifindex);
+	bind_tx_ring(tr->sock, &tx_ring, ifindex);
 	mt_init_by_seed_time();
 
-	if (mode->cpu >= 0 && ifindex > 0) {
-		irq = device_irq_number(mode->device);
-		device_bind_irq_to_cpu(mode->cpu, irq);
-		printf("IRQ: %s:%d > CPU%d\n", mode->device, irq, 
-		       mode->cpu);
+	if (tr->cpu == 0 && ifindex > 0) {
+		irq = device_irq_number(tr->mode->device);
+		device_bind_irq_to_cpu(tr->cpu, irq);
+		printf("IRQ: %s:%d > CPU%d\n", tr->mode->device, irq, 
+		       tr->cpu);
 	}
 
-	if (mode->kpull)
-		interval = mode->kpull;
-	if (cfg->num > 0)
-		num = cfg->num;
+	assert(cpus > 0);
+	if (tr->cpu == 0 && tr->mode->kpull)
+		interval = tr->mode->kpull;
+	if (tr->cfg->num > 0) {
+		num = tr->cfg->num / cpus;
+		if (tr->cfg->num % cpus > 0 && tr->cpu == 0) {
+			num += tr->cfg->num % cpus;
+		}
+	}
 
-	printf("MD: FIRE %s %luus\n\n", mode->rand ? "RND" : "RR", interval);
-	printf("Running! Hang up with ^C!\n\n");
+	if (tr->cpu == 0) {
+		printf("MD: FIRE %s %luus\n\n", tr->mode->rand ?
+		       "RND" : "RR", interval);
+		printf("Running! Hang up with ^C!\n\n");
 
-	itimer.it_interval.tv_sec = 0;
-	itimer.it_interval.tv_usec = interval;
-	itimer.it_value.tv_sec = 0;
-	itimer.it_value.tv_usec = interval;
-	setitimer(ITIMER_REAL, &itimer, NULL); 
+		itimer.it_interval.tv_sec = 0;
+		itimer.it_interval.tv_usec = interval;
+		itimer.it_value.tv_sec = 0;
+		itimer.it_value.tv_usec = interval;
+		setitimer(ITIMER_REAL, &itimer, NULL); 
+	}
 
 	l = 0;
 	while (likely(sigint == 0) && likely(num > 0)) {
@@ -398,53 +427,56 @@ static void tx_fire_or_die(struct mode *mode, struct pktconf *cfg)
 			out = ((uint8_t *) hdr) + TPACKET_HDRLEN -
 			      sizeof(struct sockaddr_ll);
 
-			hdr->tp_h.tp_snaplen = cfg->pkts[l].plen;
-			hdr->tp_h.tp_len = cfg->pkts[l].plen;
+			hdr->tp_h.tp_snaplen = tr->cfg->pkts[l].plen;
+			hdr->tp_h.tp_len = tr->cfg->pkts[l].plen;
 
-			for (c = 0; c < cfg->pkts[l].clen; ++c) {
-				cnt = &(cfg->pkts[l].cnt[c]);
+			for (c = 0; c < tr->cfg->pkts[l].clen; ++c) {
+				cnt = &(tr->cfg->pkts[l].cnt[c]);
 				cnt->val -= cnt->min;
 				cnt->val = (cnt->val + cnt->inc) %
 					   (cnt->max - cnt->min + 1);
 				cnt->val += cnt->min;
-				cfg->pkts[l].payload[cnt->off] = cnt->val;
+				tr->cfg->pkts[l].payload[cnt->off] = cnt->val;
 			}
 
-			for (r = 0; r < cfg->pkts[l].rlen; ++r) {
-				rnd = &(cfg->pkts[l].rnd[r]);
+			for (r = 0; r < tr->cfg->pkts[l].rlen; ++r) {
+				rnd = &(tr->cfg->pkts[l].rnd[r]);
 				rnd->val = lcrand(rnd->val); 
-				cfg->pkts[l].payload[rnd->off] = rnd->val;
+				tr->cfg->pkts[l].payload[rnd->off] = rnd->val;
 			}
 
-			__memcpy(out, cfg->pkts[l].payload, cfg->pkts[l].plen);
-			mode->stats.tx_bytes += cfg->pkts[l].plen;
-			mode->stats.tx_packets++;
+			__memcpy(out, tr->cfg->pkts[l].payload,
+				 tr->cfg->pkts[l].plen);
+			tr->stats.tx_bytes += tr->cfg->pkts[l].plen;
+			tr->stats.tx_packets++;
 
-			if (mode->rand)
-				l = mt_rand_int32() % cfg->len;
+			if (tr->mode->rand)
+				l = mt_rand_int32() % tr->cfg->len;
 			else {
 				l++;
-				if (l >= cfg->len)
+				if (l >= tr->cfg->len)
 					l = 0;
 			}
 
 			kernel_may_pull_from_tx(&hdr->tp_h);
 			next_slot(&it, &tx_ring);
 
-			if (cfg->num > 0)
+			if (tr->cfg->num > 0)
 				num--;
 			if (unlikely(sigint == 1))
 				break;
 		}
 	}
 
-	destroy_tx_ring(sock, &tx_ring);
-	close(sock);
+	destroy_tx_ring(tr->sock, &tx_ring);
+	close(tr->sock);
 
 	fflush(stdout);
 	printf("\n");
-	printf("\r%lu frames outgoing\n", mode->stats.tx_packets);
-	printf("\r%lu bytes outgoing\n", mode->stats.tx_bytes);
+	printf("\r%lu frames outgoing on CPU%d\n", tr->stats.tx_packets, tr->cpu);
+	printf("\r%lu bytes outgoing on CPU%d\n", tr->stats.tx_bytes, tr->cpu);
+	fflush(stdout);
+	pthread_exit(0);
 }
 
 #define TYPE_NUM 0
@@ -659,6 +691,75 @@ static void cleanup_cfg(struct pktconf *cfg)
 		xfree(cfg->pkts);
 }
 
+static struct pktconf *clone_cfg(struct pktconf *orig)
+{
+	int i;
+	struct pktconf *ret = xzmalloc(sizeof(*ret));
+	ret->num = orig->num;
+	ret->gap = orig->gap;
+	ret->len = orig->len;
+	ret->pkts = xzmalloc(sizeof(struct packet) * orig->len);
+	for (i = 0; i < ret->len; ++i) {
+		ret->pkts[i].plen = orig->pkts[i].plen;
+		ret->pkts[i].clen = orig->pkts[i].clen;
+		ret->pkts[i].rlen = orig->pkts[i].rlen;
+		ret->pkts[i].payload = xzmalloc(ret->pkts[i].plen);
+		if (orig->pkts[i].clen > 0) {
+			ret->pkts[i].cnt = xzmalloc(sizeof(struct counter) *
+						    orig->pkts[i].clen);
+			memcpy(ret->pkts[i].cnt, orig->pkts[i].cnt,
+			       sizeof(struct counter) * orig->pkts[i].clen);
+		}
+		if (orig->pkts[i].rlen > 0) {
+			ret->pkts[i].rnd = xzmalloc(sizeof(struct randomizer) *
+						    orig->pkts[i].rlen);
+			memcpy(ret->pkts[i].rnd, orig->pkts[i].rnd,
+			       sizeof(struct randomizer) * orig->pkts[i].rlen);
+		}
+	}
+	return ret;
+}
+
+static void thread_spawn_or_panic(unsigned int cpus, struct mode *mode,
+				  struct pktconf *cfg)
+{
+	int i, ret;
+	cpu_set_t cpuset;
+
+	for (i = 0; i < cpus; ++i) {
+		CPU_ZERO(&cpuset);
+		threadpool[i].cpu = i % cpus;
+		CPU_SET(threadpool[i].cpu, &cpuset);
+		threadpool[i].interval = TX_KERNEL_PULL_INT;
+		threadpool[i].cfg = clone_cfg(cfg);
+		threadpool[i].mode = mode;
+		threadpool[i].sock = 0;
+
+		ret = pthread_create(&threadpool[i].trid, NULL,
+				     tx_fire_or_die, &threadpool[i]);
+		if (ret < 0)
+			panic("Thread creation failed!\n");
+		ret = pthread_setaffinity_np(threadpool[i].trid,
+					     sizeof(cpuset), &cpuset);
+		if (ret < 0)
+			panic("Thread CPU migration failed!\n");
+		pthread_detach(threadpool[i].trid);
+		info("Thread on CPU%d up and running!\n", threadpool[i].cpu);
+	}
+	sleep(1);
+}
+
+static void thread_finish(unsigned int cpus)
+{
+	int i;
+	for (i = 0; i < cpus; ++i) {
+		while (pthread_join(threadpool[i].trid, NULL) < 0)
+			;
+		barrier();
+		cleanup_cfg(threadpool[i].cfg);
+	}
+}
+
 static int main_loop(struct mode *mode, char *confname, unsigned long pkts,
 		     unsigned long gap)
 {
@@ -667,12 +768,20 @@ static int main_loop(struct mode *mode, char *confname, unsigned long pkts,
 		.gap = gap,
 		.len = 0,
 	};
+	cpus = get_number_cpus_online();
 
 	parse_conf_or_die(confname, &cfg);
 	if (gap > 0)
 		tx_tgap_or_die(mode, &cfg);
-	else
-		tx_fire_or_die(mode, &cfg);
+	else {
+		threadpool = xzmalloc(sizeof(*threadpool) * cpus);
+		thread_spawn_or_panic(cpus, mode, &cfg);
+		while (!sigint)
+			sleep(1);
+		thread_finish(cpus);
+		barrier();
+		xfree(threadpool);
+	}
 	cleanup_cfg(&cfg);
 
 	return 0;
diff --git a/src/trafgen/Makefile b/src/trafgen/Makefile
index ef1f1c6..151365a 100644
--- a/src/trafgen/Makefile
+++ b/src/trafgen/Makefile
@@ -7,7 +7,7 @@ include ../definitions.mk
 
 INCLUDE    = -I..
 CFLAGS    +=
-LIBS       =
+LIBS       = -lpthread
 
 core-objs  = trafgen.o
 lib-objs   = xmalloc.o                  \
